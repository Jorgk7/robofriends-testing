{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundry.js","CounterButton.js","Header.js","App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3439e17d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({  name, email, id }) => {\r\n\treturn (\r\n\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t<img alt='robots' src={`https://robohash.org/${id}?size=190x190`} />\r\n\t<div>\r\n\t<h2>{name}</h2>\r\n\t<p>{email}</p>\r\n\t </div>\r\n\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\nconsole.log('Cardlist')\r\n return (\r\n \t\t <div>\r\n\t\t\t{robots.map((user, i) => {\r\n \t  return (\r\n \t\t<Card\r\n \t  \t\tkey={i}\r\n \t  \t\tid={robots[i].id}\r\n \t  \t\tname={robots[i].name}\r\n \t  \t\temail={robots[i].email}\r\n \t   \t\t />\r\n \t    );\r\n \t})\r\n\t\t}\r\n\t  </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\tconsole.log('SearchBox')\r\n\treturn (\r\n   <div className='pa2'>\r\n\t<input\r\n\t aria-label='Search Robots'\r\n\t className='pa3 ba b--green bg-lightest-blue'\r\n\t type='search'\r\n\t placeholder='search robots'\r\n\t onChange={searchChange}\r\n    />\r\n   </div>\r\n  );\r\n} \r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px' }}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t}\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\trender() {\r\n\tif (this.state.hasError) {\r\n\t\treturn <h1>Oooops. That is not good</h1>\r\n\t}\r\n\treturn this.props.children\r\n  }\r\n};\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tcount:0\r\n\t\t}\r\n\t}\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.state.count !== nextState.count) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\tupdateCount = () => {\r\n\t\tthis.setState(state => {\r\n\t\t\treturn {count: this.state.count + 1}\r\n\t\t})\r\n\t\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('CounterButton')\r\n\t\treturn (\r\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\r\n\t\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('Header')\r\n\t\treturn (\r\n\t\t<div>\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<CounterButton color={'white'} />\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from './ErrorBoundry';\r\nimport './App.css';\r\nimport Header from './Header';\r\n\r\nimport { setSearchField, requestRobots } from './actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t  searchField: state.searchRobots.searchField,\r\n\t  robots: state.requestRobots.robots,\r\n\t  isPending: state.requestRobots.isPending,\r\n\t  error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t  this.props.onRequestRobots();\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robots  =>{\r\n\t\t  return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t  \t})\t\r\n\t\treturn isPending ? \r\n\t\t<h1>Loading</h1> :\r\n\t\t(\r\n\t\t<div className='tc'>\r\n\t\t <Header />\r\n\t\t <SearchBox searchChange={onSearchChange}/>\r\n\t\t <Scroll>\r\n\t\t <ErrorBoundry>\r\n \t     <CardList robots={filteredRobots} />\r\n \t     </ErrorBoundry>\r\n \t     </Scroll> \r\n \t   </div>\r\n\t);\r\n\t }\r\n   }\r\n\t\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n  \ttype: CHANGE_SEARCH_FIELD,\r\n  \tpayload: text\r\n  })\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t  .then(response => response.json())\r\n\t  .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t  .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t  return Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t  return state;\r\n\t}\r\n }\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\n export const requestRobots = (state=initialStateRobots, action={}) => {\r\n \tswitch(action.type) {\r\n \t\tcase REQUEST_ROBOTS_PENDING:\r\n \t\t  return Object.assign({}, state, { isPending: true})\r\n \t\tcase REQUEST_ROBOTS_SUCCESS:\r\n \t\t  return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n \t\tcase REQUEST_ROBOTS_FAILED:\r\n \t\t  return Object.assign({}, state, { error: action.payload, isPending: false })\r\n \t\tdefault:\r\n \t\t  return state;    \r\n \t}\r\n }\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './App';\n// import registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers.js';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n// registerServiceWorker();\n"],"sourceRoot":""}